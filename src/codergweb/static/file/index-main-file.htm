package&nbsp;main<br>
<br>
import(<br>
&nbsp;&nbsp;&nbsp;&nbsp;<red>"coderg"</red>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//就是这个家伙<br>
&nbsp;&nbsp;&nbsp;&nbsp;"codergweb/controllor"<br>
)<br>
<br>
func&nbsp;main(){&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<red>service</red>&nbsp;:=&nbsp;coderg.<red>ServicePrepare</red>("codergweb.cfg");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//准备服务，并提供配置文件<br>
&nbsp;&nbsp;&nbsp;&nbsp;service.NodeTree&nbsp;=&nbsp;coderg.<red>NewNodeTree</red>(&controllor.IndexControllor{});&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//新建一个节点树，并设置了首页锁对应的控制器<br>
&nbsp;&nbsp;&nbsp;&nbsp;service.NodeTree.<red>AddNode</red>("node1","nodetree/sp.cfg",&controllor.AbcControllor{});<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;↑&nbsp;添加一个叫node1的节点，节点配置文件为sp.cfg，以及对应控制器，以后可以通过domain.name/node1访问了<br>
&nbsp;&nbsp;&nbsp;&nbsp;service.NodeTree.<red>AddUnit</red>("spnode","nodetree/sp.cfg",&controllor.SinglePageDoor{});<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;↑&nbsp;添加一个叫spnode的节点，依然有节点配置文件，但这次对应的不是控制器，而是单元（Unit）的入口，就叫注册单元节点吧<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;↑&nbsp;那么单元内的一堆控制器，就可以用domain.name/spnode/controllor1之类的方式访问了<br>
&nbsp;&nbsp;&nbsp;&nbsp;sp2,&nbsp;_&nbsp;:=&nbsp;service.NodeTree.AddUnit("node2","",&controllor.SinglePageDoor{});<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;↑&nbsp;依然是注册一个叫node2的单元节点，只是这次不需要配置文件了，用了返回值<br>
&nbsp;&nbsp;&nbsp;&nbsp;sp2.AddUnit("sp3","nodetree/sp.cfg",&controllor.SinglePageDoor{});<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;↑&nbsp;还是注册一个单元节点，但这里是node2的字节点，<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;↑&nbsp;于是访问链接（含单元内的控制器）就是：domain.name/node2/sp3/controllor1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;↑&nbsp;无论是单元还是控制器都可以重复或嵌套注册，有机制返回当前所在节点和所有父节点的配置文件<br>
&nbsp;&nbsp;&nbsp;&nbsp;service.NodeTree.<red>Router</red>(service);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;根据节点树生成路由信息并装入主路由器<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;service.<red>Start</red>();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;启动服务<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;<red>service2</red>&nbsp;:=&nbsp;coderg.ServicePrepare("otherweb.cfg")<br>
&nbsp;&nbsp;&nbsp;......<br>
&nbsp;&nbsp;&nbsp;&nbsp;service2.Start();<br>
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;↑&nbsp;只要选择不同的配置文件，且配置文件中的端口设定不一样，就可以启动多个服务<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;service.<red>Wait</red>();&nbsp;&nbsp;&nbsp;&nbsp;//或&nbsp;service2.Wait();&nbsp;随便找一个服务写一个就可以了，不过是个等待，不写这句程序会直接退出，你懂的<br>
}<br>
